package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;
import java.time.temporal.ChronoUnit;

import accumulate com.ablehealth.functions.EarliestMedicationAccumulateFunction earliestMedication;

rule 'Year2019.Spc2.Denominator'
when
    $program: Program(rules contains 'measure.Hedis.2019.Spc2')
    Year2019HedisSpcDenominator()
    $patient: Patient()
    exists Medication(
      startsDuring($program.measurementPeriod),
      withValueSet("NcqaYear2019", "HIGH_AND_MODERATE_INTENSITY_STATIN_MEDICATIONS"),
      prescribed == true
    )
then
    insert(new PatientDenominator($program, $patient, 'Year2019.Spc2'));
end

rule 'Year2019.Spc2.Exclusion.exclusion_1'
when
    PatientDenominator($program: program, $patient: patient, measure == 'Year2019.Spc2')
    Year2019HedisSpcExclusion1()
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Spc2', MeasureStatusValue.EXCLUSION, "exclusion_1");
end

rule 'Year2019.Spc2.Exclusion.exclusion_2'
when
    PatientDenominator($program: program, $patient: patient, measure == 'Year2019.Spc2')
    Year2019HedisSpcExclusion2()
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Spc2', MeasureStatusValue.EXCLUSION, "exclusion_2");
end

rule 'Year2019.Spc2.Exclusion.exclusion_3'
when
    PatientDenominator($program: program, $patient: patient, measure == 'Year2019.Spc2')
    Year2019HedisSpcExclusion3()
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Spc2', MeasureStatusValue.EXCLUSION, "exclusion_3");
end

rule 'Year2019.Spc2.Success.performance_met'
when
    PatientDenominator($program: program, $patient: patient, measure == 'Year2019.Spc2')
    $earliestMedication: Medication() from accumulate (
      $m: Medication(
        startsDuring($program.measurementPeriod),
        withValueSet("NcqaYear2019", "HIGH_AND_MODERATE_INTENSITY_STATIN_MEDICATIONS"),
        prescribed == true
      ),
      earliestMedication($m)
    )
    accumulate(
        $m: Medication(
          startsDuring($program.measurementPeriod),
          withValueSet("NcqaYear2019", "HIGH_AND_MODERATE_INTENSITY_STATIN_MEDICATIONS"),
          prescribed == true
        );
        $totalDays: sum($m.totalDaysSupplied($program.measurementPeriodEndDate));
        (double)$totalDays / ChronoUnit.DAYS.between($earliestMedication.startDate, $program.measurementPeriod.end) >= 0.8
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Spc2', MeasureStatusValue.SUCCESS, "performance_met");
end

rule 'Year2019.Spc2.Gap.performance_not_met'
when
    PatientDenominator($program: program, $patient: patient, measure == 'Year2019.Spc2')
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Spc2', MeasureStatusValue.GAP, "performance_not_met");
end
