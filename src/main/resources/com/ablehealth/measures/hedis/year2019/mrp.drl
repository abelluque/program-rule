package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;

global PatientResults controlSet;

rule 'Year2019.Hedis.Mrp.Denominator'
when
    $program: Program(rules contains 'measure.Hedis.2019.Mrp')
    Patient(getAgeInYearsAt($program.measurementPeriod.end) >= 18)
    $encounter: ClinicalActivity(
        startsDuring($program.measurementPeriod.start, $program.measurementPeriod.end.minusDays(30)),
        withValueSet("HedisYear2019", "INPATIENT_STAY")
    )
    not ClinicalActivity(
        startsDuring($program.measurementPeriod),
        withValueSet("MipsYear2019", "MIPS_HOSPICE_SERVICE") || withValueSet("VsacYear2019", "PALLIATIVE_CARE")
    )
    not ClinicalActivity(
        startsDuring($program.measurementPeriod),
        withValueSet("HedisYear2019", "INPATIENT_STAY"),
        startsOnOrBefore($encounter.startDate.plusDays(30)),
        startDate.isAfter($encounter.startDate)
    )
then
    insert(new EncounterDenominator($program, $encounter, 'Year2019.Mrp'));
end

rule 'Year2019.Hedis.Mrp.SuccessReasons.PerformanceMet'
when
    EncounterDenominator($encounter: clinicalActivity, $program: program, measure == 'Year2019.Mrp')
    $patient: Patient()
    exists ClinicalActivity(
        startsDuring($program.measurementPeriod),
        withValueSet("HedisYear2019", "MEDICATION_RECONCILIATION") || withValueSet("AbleYear2019", "MEDICATION_RECONCILIATION"),
        startsDuring($encounter.stopDate, $encounter.stopDate.plusDays(30))
    )
then
    controlSet.addEncounterMeasureStatus($program, $encounter, 'Year2019.Mrp', MeasureStatusValue.SUCCESS, "performance_met");
end

rule 'Year2019.Hedis.Mrp.GapReasons.PerformanceNotMet'
when
    EncounterDenominator($encounter: clinicalActivity, $program: program, measure == 'Year2019.Mrp')
then
    controlSet.addEncounterMeasureStatus($program, $encounter, 'Year2019.Mrp', MeasureStatusValue.GAP, "performance_not_met");
end
