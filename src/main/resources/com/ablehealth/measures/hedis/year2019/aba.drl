package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;

global PatientResults controlSet;

rule 'Year2019.Aba.Denominator'
when
    $program: Program(rules contains 'measure.Hedis.2019.Aba')
    $patient: Patient(
      getAgeInYearsAt($program.measurementPeriod.start) >= 18 &&
      getAgeInYearsAt($program.measurementPeriod.end) <= 74
    )
    exists ClinicalActivity(
        startsDuring($program.measurementPeriod.end.plusDays(1).minusMonths(24),$program.measurementPeriod.end),
        withValueSet("HedisYear2019", "OUTPATIENT")
    )
    and not ClinicalActivity(
        startsDuring($program.measurementPeriod),
        withValueSet("MipsYear2019", "MIPS_HOSPICE_SERVICE")||
        withValueSet("VsacYear2019", "PALLIATIVE_CARE")
    )
then
    insert(new PatientDenominator($program, $patient, 'Year2019.Aba'));
end

rule 'Year2019.Aba.Exclusion.exclusion_1'
when
    PatientDenominator($program: program, $patient: patient, measure == 'Year2019.Aba')
    exists Diagnosis( // Patient is not pregnant
        overlaps($program.measurementPeriod),
        withValueSet("HedisYear2019", "PREGNANCY")
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Aba', MeasureStatusValue.EXCLUSION, "exclusion_1");
end

rule 'Year2019.Aba.Success.performance_met'
when
    PatientDenominator($program: program, $patient: patient, measure == 'Year2019.Aba')
    ((
        exists ClinicalActivity(
            startsDuring($program.measurementPeriod.end.plusDays(1).minusMonths(24),$program.measurementPeriod.end),
            $patient.getAgeInYearsAt(startDate) >=20,
            withValueSet("HedisYear2019", "OUTPATIENT")
        ) and (
            exists Diagnosis(
                startsDuring($program.measurementPeriod.end.plusDays(1).minusMonths(24),$program.measurementPeriod.end),
                withValueSet("HedisYear2019", "BMI")
            ) or exists ClinicalActivity(
                startsDuring($program.measurementPeriod.end.plusDays(1).minusMonths(24),$program.measurementPeriod.end),
                withValueSet("VsacYear2019", "BMI_LOINC_VALUE") ||
                withValueSet("MipsYear2019", "PERFORMANCE_MET_G8420") ||
                withValueSet("MipsYear2019", "PERFORMANCE_MET_G8417") ||
                withValueSet("MipsYear2019", "PERFORMANCE_MET_G8418") ||
                withValueSet("MipsYear2019", "DENOMINATOR_EXCEPTION_G8416") ||
                withValueSet("MipsYear2019", "PERFORMANCE_NOT_MET_G8419")
            )
        )
    ) or (
       exists ClinicalActivity(
            startsDuring($program.measurementPeriod.end.plusDays(1).minusMonths(24),$program.measurementPeriod.end),
            $patient.getAgeInYearsAt(startDate) <= 19,
            withValueSet("HedisYear2019", "OUTPATIENT")
        ) and (
            exists Diagnosis(
                startsDuring($program.measurementPeriod.end.plusDays(1).minusMonths(24),$program.measurementPeriod.end),
                withValueSet("HedisYear2019", "BMI_PERCENTILE")
            ) or exists ClinicalActivity(
                startsDuring($program.measurementPeriod.end.plusDays(1).minusMonths(24),$program.measurementPeriod.end),
                withValueSet("VsacYear2019", "BMI_PERCENTILE")
            )
        )
    ))
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Aba', MeasureStatusValue.SUCCESS, "performance_met");
end

rule 'Year2019.Aba.Gap.performance_not_met'
when
    PatientDenominator($program: program, $patient: patient, measure == 'Year2019.Aba')
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Aba', MeasureStatusValue.GAP, "performance_not_met");
end
