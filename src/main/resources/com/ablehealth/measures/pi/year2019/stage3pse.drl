package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;

import java.util.Collection;

global PatientResults controlSet;
global Collection<Provider> providers;

rule 'Year2019.Stage3pse.Denominator'
when
    $program: Program(rules contains 'measure.Pi.2019.Stage3pse')
    $encounter: Encounter(
        startsDuring($program.piMeasurementPeriod)
    )
then
    insert(new EncounterDenominator($program, $encounter, 'Year2019.Stage3pse'));
end

rule 'Year2019.Stage3pse.Success.performance_met.Org'
when
    EncounterDenominator($program: program, $encounter: encounter, measure == 'Year2019.Stage3pse')
    $patient: Patient()
    exists SystemEvent(
        startsDuringYear($program.piMeasurementPeriod),
        eventType == "EDUCATION_PROVISION"
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Stage3pse', MeasureStatusValue.SUCCESS, "performance_met");
end

rule 'Year2019.Stage3pse.Success.performance_met.Provider'
when
    EncounterDenominator($program: program, $encounter: encounter, measure == 'Year2019.Stage3pse')
    $patient: Patient()
    exists SystemEvent(
        startsDuringYear($program.piMeasurementPeriod),
        eventType == "EDUCATION_PROVISION",
        providerExternalId == $encounter.providerExternalId
    )
then
    controlSet.addProviderPatientMeasureStatusesForMatchingProviders($program, $patient, $encounter.providerExternalId,'Year2019.Stage3pse', MeasureStatusValue.SUCCESS, "performance_met", providers);
end

rule 'Year2019.Stage3pse.Success.performance_met.Group'
when
    EncounterDenominator($program: program, $encounter: encounter, measure == 'Year2019.Stage3pse')
    $patient: Patient()
    exists SystemEvent(
        startsDuringYear($program.piMeasurementPeriod),
        eventType == "EDUCATION_PROVISION",
        groupExternalId == $encounter.groupExternalId
    )
then
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Stage3pse', MeasureStatusValue.SUCCESS, "performance_met");
end

rule 'Year2019.Stage3pse.Gap.performance_not_met'
when
    EncounterDenominator($program: program, $encounter: encounter, measure == 'Year2019.Stage3pse')
    $patient: Patient()
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Stage3pse', MeasureStatusValue.GAP, "performance_not_met");
    controlSet.addProviderPatientMeasureStatusesForMatchingProviders($program, $patient, $encounter.providerExternalId,'Year2019.Stage3pse', MeasureStatusValue.GAP, "performance_not_met", providers);
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId, 'Year2019.Stage3pse', MeasureStatusValue.GAP, "performance_not_met");
end
