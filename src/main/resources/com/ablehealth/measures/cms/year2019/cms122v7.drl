package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;

import accumulate com.ablehealth.functions.LatestLaboratoryTestByDatetimeAccumulateFunction latestLaboratoryTestByDatetime;

global PatientResults controlSet;

rule 'Year2019.Cms122v7.Denominator'
when
    $program: Program(rules contains 'measure.Cms.2019.Cms122v7')
    $encounter: ClinicalActivity(
        startsDuring($program.measurementPeriod),
        endsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "ANNUAL_WELLNESS_VISIT") ||
        withValueSet("VsacYear2019", "OFFICE_VISIT") ||
        withValueSet("VsacYear2019", "PREVENTIVE_CARE_SERVICES___ESTABLISHED_OFFICE_VISIT_18_AND_UP") ||
        withValueSet("VsacYear2019", "PREVENTIVE_CARE_SERVICES_INITIAL_OFFICE_VISIT_18_AND_UP") ||
        withValueSet("VsacYear2019", "HOME_HEALTHCARE_SERVICES")
    )
    exists Diagnosis(
        overlaps($program.measurementPeriod),
        withValueSet("VsacYear2019", "DIABETES")
    )
    Patient(getAgeInYearsAt($program.measurementPeriod.start) >= 18 && getAgeInYearsAt($program.measurementPeriod.start) < 75)
then
    insert(new EncounterDenominator($program, $encounter, 'Year2019.Cms122v7'));
end

rule 'Year2019.Cms122v7.Exclusion.exclusion_hospice'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms122v7')
    $patient: Patient()
    exists ClinicalActivity(
        endsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "ENCOUNTER_INPATIENT"),
        withChildValueSet("VsacYear2019", "DISCHARGED_TO_HEALTH_CARE_FACILITY_FOR_HOSPICE_CARE") ||
        withChildValueSet("VsacYear2019", "DISCHARGED_TO_HOME_FOR_HOSPICE_CARE")
    )
    or exists Order(
        startsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "HOSPICE_CARE_AMBULATORY")
    )
    or exists ClinicalActivity(
        overlaps($program.measurementPeriod),
        withValueSet("VsacYear2019", "HOSPICE_CARE_AMBULATORY")
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms122v7', MeasureStatusValue.EXCLUSION, "exclusion_hospice");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms122v7', MeasureStatusValue.EXCLUSION, "exclusion_hospice");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms122v7', MeasureStatusValue.EXCLUSION, "exclusion_hospice");
end

rule 'Year2019.Cms122v7.Success.performance_met'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms122v7')
    $patient: Patient()
    (
        exists LaboratoryTestPerformed(resultAsDecimal > 9) from accumulate (
            $c: LaboratoryTestPerformed(
                startsDuring($program.measurementPeriod),
                withValueSet("VsacYear2019", "HBA1C_LABORATORY_TEST")
            ),
            latestLaboratoryTestByDatetime($c)
        )
        or exists LaboratoryTestPerformed(resultAsDecimal == null) from accumulate (
            $ltp: LaboratoryTestPerformed(
                startsDuring($program.measurementPeriod),
                withValueSet("VsacYear2019", "HBA1C_LABORATORY_TEST")
            ),
            latestLaboratoryTestByDatetime($ltp)
        )
        or not LaboratoryTestPerformed(
            startsDuring($program.measurementPeriod),
            withValueSet("VsacYear2019", "HBA1C_LABORATORY_TEST")
        )
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms122v7', MeasureStatusValue.SUCCESS, "performance_met");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms122v7', MeasureStatusValue.SUCCESS, "performance_met");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms122v7', MeasureStatusValue.SUCCESS, "performance_met");
end

rule 'Year2019.Cms122v7.Gap.performance_not_met'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms122v7')
    $patient: Patient()
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms122v7', MeasureStatusValue.GAP, "performance_not_met");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms122v7', MeasureStatusValue.GAP, "performance_not_met");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms122v7', MeasureStatusValue.GAP, "performance_not_met");
end
