package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;

import accumulate com.ablehealth.functions.LatestClinicalActivityWithDatetimeAccumulateFunction latestClinicalActivityWithDatetime;

global PatientResults controlSet;

declare Year2019Cms165v7EncounterWithBloodPressure
    outpatientVisit: ClinicalActivity
end

rule 'Year2019.Cms165v7.Denominator'
when
    $program: Program(rules contains 'measure.Cms.2019.Cms165v7')
    $encounter: ClinicalActivity(
        startsDuring($program.measurementPeriod),
        endsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "OFFICE_VISIT") ||
        withValueSet("VsacYear2019", "ANNUAL_WELLNESS_VISIT") ||
        withValueSet("VsacYear2019", "PREVENTIVE_CARE_SERVICES___ESTABLISHED_OFFICE_VISIT_18_AND_UP") ||
        withValueSet("VsacYear2019", "PREVENTIVE_CARE_SERVICES_INITIAL_OFFICE_VISIT_18_AND_UP") ||
        withValueSet("VsacYear2019", "HOME_HEALTHCARE_SERVICES")
    )
    (
        exists Patient(
            getAgeInYearsAt($program.measurementPeriod.start) >= 18,
            getAgeInYearsAt($program.measurementPeriod.start) < 85
        ) and exists Diagnosis(
            startsOnOrBefore($program.measurementPeriod.end.minusMonths(6)),
            withValueSet("VsacYear2019", "ESSENTIAL_HYPERTENSION")
        )
    )
then
    insert(new EncounterDenominator($program, $encounter, 'Year2019.Cms165v7'));
end

rule 'Year2019.Cms165v7.Exclusion.exclusion_1'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms165v7')
    $patient: Patient()
    exists ClinicalActivity(
        endsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "ENCOUNTER_INPATIENT"),
        withChildValueSet("VsacYear2019", "DISCHARGED_TO_HEALTH_CARE_FACILITY_FOR_HOSPICE_CARE") ||
        withChildValueSet("VsacYear2019", "DISCHARGED_TO_HOME_FOR_HOSPICE_CARE")
    ) or exists Order(
        startsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "HOSPICE_CARE_AMBULATORY")
    ) or exists ClinicalActivity(
        overlaps($program.measurementPeriod),
        withValueSet("VsacYear2019", "HOSPICE_CARE_AMBULATORY")
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms165v7', MeasureStatusValue.EXCLUSION, "exclusion_1");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms165v7', MeasureStatusValue.EXCLUSION, "exclusion_1");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms165v7', MeasureStatusValue.EXCLUSION, "exclusion_1");
end

rule 'Year2019.Cms165v7.Exclusion.exclusion_2'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms165v7')
    $patient: Patient()
    (
        exists Diagnosis(
            overlaps($program.measurementPeriod),
            withValueSet("VsacYear2019", "PREGNANCY") ||
            withValueSet("VsacYear2019", "END_STAGE_RENAL_DISEASE") ||
            withValueSet("VsacYear2019", "KIDNEY_TRANSPLANT_RECIPIENT") ||
            withValueSet("VsacYear2019", "CHRONIC_KIDNEY_DISEASE_STAGE_5")
        ) or exists ClinicalActivity(
            startsBefore($program.measurementPeriod.end),
            withValueSet("VsacYear2019", "VASCULAR_ACCESS_FOR_DIALYSIS") ||
            withValueSet("VsacYear2019", "KIDNEY_TRANSPLANT") ||
            withValueSet("VsacYear2019", "DIALYSIS_SERVICES")
        ) or exists ClinicalActivity(
            startsBefore($program.measurementPeriod.end),
            withValueSet("VsacYear2019", "ESRD_MONTHLY_OUTPATIENT_SERVICES")
        )
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms165v7', MeasureStatusValue.EXCLUSION, "exclusion_2");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms165v7', MeasureStatusValue.EXCLUSION, "exclusion_2");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms165v7', MeasureStatusValue.EXCLUSION, "exclusion_2");
end

rule 'Year2019.Cms165v7.EncounterWithBloodPressure'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms165v7')
  $outpatientVisit: ClinicalActivity(
      startsDuring($program.measurementPeriod),
      withValueSet("VsacYear2019", "ADULT_OUTPATIENT_VISIT")
  )
  exists Diagnosis(
      overlaps($outpatientVisit),
      withValueSet("VsacYear2019", "ESSENTIAL_HYPERTENSION")
  )
  exists ClinicalActivity(
      overlaps($outpatientVisit),
      resultAsDecimal != null,
      withValueSet("VsacYear2019", "DIASTOLIC_BLOOD_PRESSURE")
  )
  exists ClinicalActivity(
      overlaps($outpatientVisit),
      resultAsDecimal != null,
      withValueSet("VsacYear2019", "SYSTOLIC_BLOOD_PRESSURE")
  )
then
  insert(new Year2019Cms165v7EncounterWithBloodPressure($outpatientVisit));
end

rule 'Year2019.Cms165v7.Success.performance_met'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms165v7')
    $patient: Patient()
    $mostRecentEncounter: ClinicalActivity() from accumulate (
        Year2019Cms165v7EncounterWithBloodPressure($outpatientVisit: outpatientVisit),
        latestClinicalActivityWithDatetime($outpatientVisit)
    )
    exists ClinicalActivity(resultAsDecimal < 90) from accumulate (
        $c: ClinicalActivity(
            startsDuring($mostRecentEncounter),
            resultAsDecimal != null,
            withValueSet("VsacYear2019", "DIASTOLIC_BLOOD_PRESSURE")
        ),
        latestClinicalActivityWithDatetime($c)
    )
    exists ClinicalActivity(resultAsDecimal < 140) from accumulate (
        $c: ClinicalActivity(
            startsDuring($mostRecentEncounter),
            resultAsDecimal != null,
            withValueSet("VsacYear2019", "SYSTOLIC_BLOOD_PRESSURE")
        ),
        latestClinicalActivityWithDatetime($c)
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms165v7', MeasureStatusValue.SUCCESS, "performance_met");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms165v7', MeasureStatusValue.SUCCESS, "performance_met");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms165v7', MeasureStatusValue.SUCCESS, "performance_met");
end

rule 'Year2019.Cms165v7.Gap.performance_not_met'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms165v7')
    $patient: Patient()
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms165v7', MeasureStatusValue.GAP, "performance_not_met");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms165v7', MeasureStatusValue.GAP, "performance_not_met");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms165v7', MeasureStatusValue.GAP, "performance_not_met");
end
