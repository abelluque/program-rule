package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;

global PatientResults controlSet;

rule 'Year2019.Cms130v7.Denominator'
when
    $program: Program(rules contains 'measure.Cms.2019.Cms130v7')
    $encounter: ClinicalActivity(
        startsDuring($program.measurementPeriod),
        endsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "OFFICE_VISIT") ||
        withValueSet("VsacYear2019", "ANNUAL_WELLNESS_VISIT") ||
        withValueSet("VsacYear2019", "PREVENTIVE_CARE_SERVICES___ESTABLISHED_OFFICE_VISIT_18_AND_UP") ||
        withValueSet("VsacYear2019", "PREVENTIVE_CARE_SERVICES_INITIAL_OFFICE_VISIT_18_AND_UP") ||
        withValueSet("VsacYear2019", "HOME_HEALTHCARE_SERVICES")
    )
    exists Patient(
        getAgeInYearsAt($program.measurementPeriod.start) >= 50 && getAgeInYearsAt($program.measurementPeriod.start) < 75
    )
then
    insert(new EncounterDenominator($program, $encounter, 'Year2019.Cms130v7'));
end

rule 'Year2019.Cms130v7.Exclusion.exclusion_1'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms130v7')
    $patient: Patient()
    exists Diagnosis(
        startsOnOrBefore($program.measurementPeriod.end),
        withValueSet("VsacYear2019", "MALIGNANT_NEOPLASM_OF_COLON")
    )
    or exists ClinicalActivity(
        startsOnOrBefore($program.measurementPeriod.end),
        withValueSet("VsacYear2019", "TOTAL_COLECTOMY")
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms130v7', MeasureStatusValue.EXCLUSION, "exclusion_1");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms130v7', MeasureStatusValue.EXCLUSION, "exclusion_1");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms130v7', MeasureStatusValue.EXCLUSION, "exclusion_1");
end

rule 'Year2019.Cms130v7.Exclusion.exclusion_hospice'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms130v7')
    $patient: Patient()
    exists ClinicalActivity(
        endsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "ENCOUNTER_INPATIENT"),
        withChildValueSet("VsacYear2019", "DISCHARGED_TO_HEALTH_CARE_FACILITY_FOR_HOSPICE_CARE") ||
        withChildValueSet("VsacYear2019", "DISCHARGED_TO_HOME_FOR_HOSPICE_CARE")
    )
    or exists Order(
        startsDuring($program.measurementPeriod),
        withValueSet("VsacYear2019", "HOSPICE_CARE_AMBULATORY")
    ) or exists ClinicalActivity(
        overlaps($program.measurementPeriod),
        withValueSet("VsacYear2019", "HOSPICE_CARE_AMBULATORY")
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms130v7', MeasureStatusValue.EXCLUSION, "exclusion_hospice");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms130v7', MeasureStatusValue.EXCLUSION, "exclusion_hospice");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms130v7', MeasureStatusValue.EXCLUSION, "exclusion_hospice");
end

rule 'Year2019.Cms130v7.Success.performance_met'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms130v7')
    $patient: Patient()
    (
        exists ClinicalActivity(
            endsDuring($program.measurementPeriod.end.minusYears(10).plusDays(1), $program.measurementPeriod.end),
            withValueSet("VsacYear2019", "COLONOSCOPY")
        ) or exists ClinicalActivity(
            endsDuring($program.measurementPeriod.end.minusYears(5).plusDays(1), $program.measurementPeriod.end),
            withValueSet("VsacYear2019", "CT_COLONOGRAPHY")
        ) or exists ClinicalActivity(
            endsDuring($program.measurementPeriod.end.minusYears(5).plusDays(1), $program.measurementPeriod.end),
            withValueSet("VsacYear2019", "FLEXIBLE_SIGMOIDOSCOPY")
        ) or exists LaboratoryTestPerformed(
            startsDuring($program.measurementPeriod.end.minusYears(3).plusDays(1), $program.measurementPeriod.end),
            withValueSet("VsacYear2019", "FIT_DNA")
        ) or exists LaboratoryTestPerformed(
            startsDuring($program.measurementPeriod),
            withValueSet("VsacYear2019", "FECAL_OCCULT_BLOOD_TEST_FOBT")
        )
    )
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms130v7', MeasureStatusValue.SUCCESS, "performance_met");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms130v7', MeasureStatusValue.SUCCESS, "performance_met");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms130v7', MeasureStatusValue.SUCCESS, "performance_met");
end

rule 'Year2019.Cms130v7.Gap.performance_not_met'
when
    EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Cms130v7')
    $patient: Patient()
then
    controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Cms130v7', MeasureStatusValue.GAP, "performance_not_met");
    controlSet.addGroupPatientMeasureStatus($program, $patient, $encounter.groupExternalId,'Year2019.Cms130v7', MeasureStatusValue.GAP, "performance_not_met");
    controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Cms130v7', MeasureStatusValue.GAP, "performance_not_met");
end
