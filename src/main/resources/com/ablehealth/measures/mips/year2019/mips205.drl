package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;
import java.time.LocalDate;

global PatientResults controlSet;

declare Mips205OrgDenominatorEncounters
  orgEncounter: ClinicalActivity
end

declare Mips205ProviderDenominatorEncounters
  providerEncounter: ClinicalActivity
end

declare Mips205Exclusion
end

declare Mips205G9228
end

declare Mips205G9229
end

rule 'Year2019.Mips205.Encounters.Org'
// Looks for existence of two encounters with any provider
when
  $program: Program(rules contains 'measure.Mips.2019.Mips205')
  $orgEncounter: ClinicalActivity(
    startsDuring($program.measurementPeriod),
    withValueSet("MipsYear2019", "MIPS_205_ENCOUNTER")
  )
  $orgEncounter2: ClinicalActivity(
    startsDuring($program.measurementPeriod),
    startsOnOrAfter($orgEncounter.startDate.plusDays(90)),
    withValueSet("MipsYear2019", "MIPS_205_ENCOUNTER")
  )
  exists Diagnosis(
    overlaps($orgEncounter),
    withValueSet("MipsYear2019", "HIV_AIDS")
  )
  exists Diagnosis(
    overlaps($orgEncounter2),
    withValueSet("MipsYear2019", "HIV_AIDS")
  )
  exists Patient(
    getAgeInYearsAt($orgEncounter.startDate) >= 13,
    getAgeInYearsAt($orgEncounter2.startDate) >= 13
  )
then
  insert(new Mips205OrgDenominatorEncounters($orgEncounter));
end

rule 'Year2019.Mips205.Encounters.Provider'
// Looks for existence of two encounters with the same provider for the provider cache
when
  $program: Program(rules contains 'measure.Mips.2019.Mips205')
  $providerEncounter: ClinicalActivity(
    startsDuring($program.measurementPeriod),
    withValueSet("MipsYear2019", "MIPS_205_ENCOUNTER")
  )
  $providerEncounter2: ClinicalActivity(
    startsDuring($program.measurementPeriod),
    startsOnOrAfter($providerEncounter.startDate.plusDays(90)),
    withValueSet("MipsYear2019", "MIPS_205_ENCOUNTER"),
    providerExternalId == $providerEncounter.providerExternalId
  )
  exists Diagnosis(
    overlaps($providerEncounter),
    withValueSet("MipsYear2019", "HIV_AIDS")
  )
  exists Diagnosis(
    overlaps($providerEncounter2),
    withValueSet("MipsYear2019", "HIV_AIDS")
  )
  exists Patient(
    getAgeInYearsAt($providerEncounter.startDate) >= 13,
    getAgeInYearsAt($providerEncounter2.startDate) >= 13
  )
then
  insert(new Mips205ProviderDenominatorEncounters($providerEncounter));
end

rule 'Year2019.Mips205.Denominator'
when
  $program: Program(rules contains 'measure.Mips.2019.Mips205')
  Mips205OrgDenominatorEncounters($encounter: orgEncounter)
then
  insert(new EncounterDenominator($program, $encounter, 'Year2019.Mips205'));
end

rule 'Year2019.Mips205.Exclusion.exclusion_1'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  exists ClinicalActivity(
    startsDuring($program.measurementPeriod),
    withValueSet("MipsYear2019", "MIPS_HOSPICE_SERVICE") || withValueSet("VsacYear2019", "PALLIATIVE_CARE")
  )
then
  insert(new Mips205Exclusion());
end

rule 'Year2019.Mips205.Exclusion.exclusion_1.Org'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  Mips205Exclusion()
then
  controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Mips205', MeasureStatusValue.EXCLUSION, "exclusion_1");
end

rule 'Year2019.Mips205.Exclusion.exclusion_1.Provider'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  Mips205Exclusion()
  Mips205ProviderDenominatorEncounters($providerEncounter: providerEncounter)
then
  controlSet.addProviderPatientMeasureStatus($program, $patient, $providerEncounter.providerExternalId, 'Year2019.Mips205', MeasureStatusValue.EXCLUSION, 'exclusion_1');
end

rule 'Year2019.Mips205.Success.G9228'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  $hivDiagnosis: Diagnosis(
    overlaps($encounter),
    withValueSet("MipsYear2019", "HIV_AIDS")
  )
  (
    exists ClinicalActivity(
      startsDuring($hivDiagnosis.startDate,$program.measurementPeriod.end),
      withValueSet("MipsYear2019", "PERFORMANCE_MET_G9228")
    )
    or (
      exists LaboratoryTestPerformed(
        startsDuring($hivDiagnosis.startDate,$program.measurementPeriod.end),
        withValueSet("VsacYear2019", "CHLAMYDIA_SCREENING")
      )
      and exists LaboratoryTestPerformed(
        startsDuring($hivDiagnosis.startDate,$program.measurementPeriod.end),
        withValueSet("VsacYear2019", "GONORRHEA_TESTS_AND_CHLAMYDIA_GONORRHEA_COMBINED_TESTS_VALUE_SET")
      )
      and exists LaboratoryTestPerformed(
        startsDuring($hivDiagnosis.startDate,$program.measurementPeriod.end),
        withValueSet("VsacYear2019", "SYPHILIS_TESTS_FOR_TREPONEMA_PALLIDUM_NUCLEIC_ACID") || withValueSet("VsacYear2019", "SYPHILIS_TESTS_FOR_TREPONEMAL_OR_NON_TREPONEMAL_ANTIBODY")
      )
    )
  )
then
  insert(new Mips205G9228());
end

rule 'Year2019.Mips205.Success.G9228.Org'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  Mips205G9228()
then
  controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Mips205', MeasureStatusValue.SUCCESS, "G9228");
end

rule 'Year2019.Mips205.Success.G9228.Provider'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  Mips205G9228()
  Mips205ProviderDenominatorEncounters($providerEncounter: providerEncounter)
then
  controlSet.addProviderPatientMeasureStatus($program, $patient, $providerEncounter.providerExternalId, 'Year2019.Mips205', MeasureStatusValue.SUCCESS, 'G9228');
end

rule 'Year2019.Mips205.Exception.G9229'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  $hivDiagnosis: Diagnosis(
    overlaps($encounter),
    withValueSet("MipsYear2019", "HIV_AIDS")
  )
  exists ClinicalActivity(
    startsDuring($hivDiagnosis.startDate,$program.measurementPeriod.end),
    withValueSet("MipsYear2019", "DENOMINATOR_EXCEPTION_G9229")
  )
then
  insert(new Mips205G9229());
end

rule 'Year2019.Mips205.Exception.G9229.Org'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  Mips205G9229()
then
  controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Mips205', MeasureStatusValue.EXCEPTION, "G9229");
end

rule 'Year2019.Mips205.Exception.G9229.Provider'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  Mips205G9229()
  Mips205ProviderDenominatorEncounters($providerEncounter: providerEncounter)
then
  controlSet.addProviderPatientMeasureStatus($program, $patient, $providerEncounter.providerExternalId, 'Year2019.Mips205', MeasureStatusValue.EXCEPTION, 'G9229');
end

rule 'Year2019.Mips205.Gap.G9230.Org'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
then
  controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Mips205', MeasureStatusValue.GAP, "G9230");
end

rule 'Year2019.Mips205.Gap.G9230.Provider'
when
  EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips205')
  $patient: Patient()
  Mips205ProviderDenominatorEncounters($providerEncounter: providerEncounter)
then
  controlSet.addProviderPatientMeasureStatus($program, $patient, $providerEncounter.providerExternalId, 'Year2019.Mips205', MeasureStatusValue.GAP, 'G9230');
end
