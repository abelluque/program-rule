package com.ablehealth;

import com.ablehealth.model.*
import com.ablehealth.payloads.*;
import com.ablehealth.results.*;

global PatientResults controlSet;

rule 'Year2019.Mips154.Denominator'
when
	$program: Program(rules contains 'measure.Mips.2019.Mips154')
	$encounter: ClinicalActivity(
		startsDuring($program.measurementPeriod),
		withValueSet("MipsYear2019", "MIPS_154_ENCOUNTER")
	)
	and
	(
		exists Diagnosis(
			startsOnOrAfter($encounter.startDate.minusMonths(12)),
			startsOnOrBefore($encounter.startDate),
			withValueSet("AbleYear2019", "FALL_WITH_INJURY")
		)
		or exists ClinicalActivity(
			startsDuring($program.measurementPeriod),
			withValueSet("MipsYear2019", "FALLS_IN_PAST_YEAR")
		)
		or exists ClinicalActivity(
			startsDuring($program.measurementPeriod),
			withValueSet("AbleYear2019", "FALLS_COUNT_SCREENING"),
			resultAsDecimal >= 2
		)
		or
		java.util.List( size >= 2) from accumulate(
			$diagnosis: Diagnosis(
				startsOnOrAfter($encounter.startDate.minusMonths(12)),
				startsOnOrBefore($encounter.startDate),
				withValueSet("HedisYear2019", "FALLS") ||
				withValueSet("AbleYear2019", "FALL")
			);
		collectList($diagnosis)
		)
	)
	Patient(
		getAgeInYearsAt($encounter.startDate) >= 65
	)
then
	insert(new EncounterDenominator($program, $encounter, 'Year2019.Mips154'));
end

rule 'Year2019.Mips154.Exclusion.exclusion_1'
when
	EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips154')
	$patient: Patient()
	(
		exists ClinicalActivity(
			startsDuring($program.measurementPeriod),
			withValueSet("MipsYear2019", "MIPS_HOSPICE_SERVICE")
		)
		or
		exists ClinicalActivity(
			overlaps($program.measurementPeriod),
			withValueSet("VsacYear2019", "PALLIATIVE_CARE")
		)
	)
then
	controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Mips154', MeasureStatusValue.EXCLUSION, "exclusion_1");
	controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Mips154', MeasureStatusValue.EXCLUSION, "exclusion_1");
end

rule 'Year2019.Mips154.Success.3288F'
when
	EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips154')
	$patient: Patient()
	(
		exists ClinicalActivity(
			startsDuring($program.measurementPeriod),
			codeModifiers.isEmpty(),
			withValueSet("MipsYear2019", "PERFORMANCE_MET_3288F")
		)
		or
		exists ClinicalActivity(
			startsDuring($program.measurementPeriod),
			withValueSet("VsacYear2019", "FALLS_SCREENING")
		)
	)
then
	controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Mips154', MeasureStatusValue.SUCCESS, "3288F");
	controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Mips154', MeasureStatusValue.SUCCESS, "3288F");
end

rule 'Year2019.Mips154.Exception.3288F-1P'
when
	EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips154')
	$patient: Patient()
	(
		exists ClinicalActivity(
			startsDuring($program.measurementPeriod),
			hasModifier("1P"),
			withValueSet("MipsYear2019", "DENOMINATOR_EXCEPTION_3288F_1P")
		)
		or
		exists Diagnosis(
			overlaps($program.measurementPeriod),
			withValueSet("VsacYear2019", "PATIENT_NOT_AMBULATORY")
		)
	)
then
	controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Mips154', MeasureStatusValue.EXCEPTION, "3288F-1P");
	controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Mips154', MeasureStatusValue.EXCEPTION, "3288F-1P");
end

rule 'Year2019.Mips154.Gap.3288F-8P'
when
	EncounterDenominator($program: program, $encounter: clinicalActivity, measure == 'Year2019.Mips154')
	$patient: Patient()
then
	controlSet.addPatientMeasureStatus($program, $patient, 'Year2019.Mips154', MeasureStatusValue.GAP, "3288F-8P");
	controlSet.addProviderPatientMeasureStatus($program, $patient, $encounter.providerExternalId,'Year2019.Mips154', MeasureStatusValue.GAP, "3288F-8P");
end
